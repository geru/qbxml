<?php
// $Id$
// namespace Drupal\qbxml;
// use Drupal\qbxml;

require_once 'qbxml.inc';

/**
 * @file
 * QBXML module
 */

/**
 * Implements hook_menu().
 */
function qbxml_menu() {
  $MENU_ENTERPRISE = 'admin/config/enterprise';

  $items[$MENU_ENTERPRISE] = array(
    'title' => 'Enterprise',
    'description' => 'Enterprise configuration',
    'weight' => -8,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items[$MENU_ENTERPRISE . '/qbxml_admin'] = array(
    'title' => 'QBXML admin',
    'description' => 'qbxml management configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('qbxml_admin_settings_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'qbxml.admin.inc',
    'file path' => drupal_get_path('module', 'qbxml'),
    // 'type' ='position' => 'right',
    'type' => MENU_NORMAL_ITEM,
  );
  $items[$MENU_ENTERPRISE . '/qbxml_ops'] = array(
    'title' => 'QBXML operations',
    'description' => 'QBXML operations and import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('qbxml_admin_operations_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'qbxml.admin.inc',
    'file path' => drupal_get_path('module', 'qbxml'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_help().
 * @param $path
 * @return bool|null|string
 */
function qbxml_help($path) {
  switch ($path) {
    case 'admin/settings/qbxml':
      return t('Configure the message queue directory for QBXML module.');

    case 'admin/help#qbxml':
      $output = '<p>' . t('This is help text for the qbxml help page') . '</p>';
      return $output;
  }
  return FALSE;
}

/**
 * Implements hook_hook_info();
 */
function qbxml_hook_info() {
  $hooks[HOOK_QBXML_PREPROCESS] = array('group' => 'qbxml');
  $hooks[HOOK_QBXML_FILEPROCESS] = array('group' => 'qbxml');
  $hooks[HOOK_QBXML_IMPORTERS] = array('group' => 'qbxml');
  return ($hooks);
}

/**
 * Implements hook_theme()
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function qbxml_theme($existing, $type, $theme, $path) {
  $ret = array(
    'qbxml' => array(
      // 'variables' => array( 'input' => array(), 'qbxml_base' => NULL, 'qbxml_opcode' => NULL,   ),
      'includes' => array("$path/template.php"),
      'preprocess functions' => array('qbxml_preprocess'),
      'function' => 'theme_qbxml'
    )
  );
  foreach (array(
             'price_nocurrency',
             'bool_truefalse',
             'field_value'
           ) as $field) {
    $ret['qbxml_' . $field] = array(
      'template' => $field,
      'path' => $path . '/theme'
    );
  }
  $qbxmlext = '\.qbxml\.tpl\.php$';
  $qbxmlfilescanpattern = "/(.+)\/(\w+)$qbxmlext/";
  foreach (array(
             $path . '/theme',
             'sites/all/libraries/qbxml',
             'sites/all/themes/qbxml'
           ) as $searchdir) {
    $outfiles = file_scan_directory($searchdir, "/$qbxmlext/");
    foreach ($outfiles as $absolute => $filename) {
      $matches = array();
      if (preg_match($qbxmlfilescanpattern, $filename->uri, $matches)) {
        $ret['qbxml__' . $matches[2]] = array(
          'template' => $matches[2] . '.qbxml', // strip extensions
          'path' => $matches[1],
          'base hook' => 'qbxml'
        );
      }
    }
  }

  return $ret;
}

/*
 * Implement the main qbxml theme
 * Probably mainly used for the Query opcode
 * This is a quick-and-dirty theme that gets you up and rolling importing
 * QB data with a single click. Real theming will be implemented elsewhere
 * in the qbxml.tpl.php files
 */
function theme_qbxml($var) {
  $base = empty($var['qbxml_base']) ? '' : $var['qbxml_base'];
  $output = '';
  if (!empty($var['input']['maxreturned'])) {
    if (in_array($base, array(
      'Lead',
      'Customer',
      'Vendor',
      'Entity',
      'ItemService',
      'ItemNonInventory',
      'ItemOtherCharge',
      'ItemInventory',
      'ItemInventoryAssembly',
      'ItemFixedAsset',
      'ItemSubtotal',
      'ItemDiscount',
      'ItemPayment',
      'ItemSalesTax',
      'ItemSalesTaxGroup',
      'ItemGroup',
      'Item',
      'Invoice',
      'Estimate',
      'SalesOrder',
      'SalesReceipt',
      'CreditMemo',
      'ReceivePayment',
      'Charge',
      'PurchaseOrder',
      'Bill',
      'ItemReceipt',
      'VendorCredit',
      'BillPaymentCheck',
      'BillPaymentCreditCard',
      'SalesTaxPaymentCheck',
      'InventoryAdjustment',
      'TimeTracking',
      'Check',
      'CreditCardCharge',
      'CreditCardCredit',
      'JournalEntry',
      'Deposit',
      'Transaction',
      'BuildAssembly',
      'ARRefundCreditCard',
      'VehicleMileage',
      'TransferInventory',
      'ItemSites',
      'BarCode',
      'Transfer',
      ''
    ))) {
      $output .= '<MaxReturned>' . $var['input']['maxreturned'] . '</MaxReturned>';
    }
  }
  if (isset($var['input']['activestatus'])) {
    $output .= '<ActiveStatus>' . $var['input']['activestatus'] . '</ActiveStatus>';
  }
  return ($output);
}

/**
 * Implements hook_qbxml_importers()
 */
function qbxml_qbxml_importers() {
  return (array('qbxml_feeds_import' => 'QBXML Feeds importer'));
}

// Functionality provided by qbxml module ---

/*
 * qbxml's uri to store files in
 */
function _qbxml_get_furi() {
  $furi = variable_get(QBXML_FURI, 'private://qbxml');
  if (!file_prepare_directory($furi, FILE_MODIFY_PERMISSIONS | FILE_CREATE_DIRECTORY)) {
    $furi = "private://";
    variable_set(QBXML_FURI, $furi);
  }
  return ($furi . '/');
}

/*
 * Generate a filename to spec
*/
function _qbxml_filename($bookid, $id, $type, $ext = 'xml') {
  return (_qbxml_get_furi() . $bookid . '-' . $id . '_R' . $type . '.' . $ext);
}

/*
 * Delete saved request file archive and database entry after successful response has been received
*/
function _qbxml_request_delete($bookid, $requestID) {
  db_delete('qbxml')
    ->condition('rid', $requestID)
    ->condition('bookid', $bookid)
    ->execute();
}

/*
 * Store a single request in database and return its newly found ID number
 * Request is timestamped and serialized
*/
function _qbxml_request_stash($bookid, $groupID, $data, $state = QBXML_STATE_QUEUED) {
  return (
  db_insert('qbxml')
    ->fields(array(
      'bookid' => $bookid,
      'gid' => $groupID,
      'state' => $state,
      'created' => REQUEST_TIME,
      'data' => json_encode($data),
    ))->execute()
  );
}

/*
 * Generate an attribute string from an array or a scalar
 */
function _qbxml_gen_attributes($attributes) {
  $ret = '';
  if (is_array($attributes)) {
    foreach ($attributes as $key => $value) {
      $ret .= ' ' . $key . '="' . (is_array($value) ? implode(',', $value) : $value) . '"';
    }
  }
  else {
    $ret = $attributes;
  }
  return $ret;
}

/**
 * @param $array
 * @param null $parentkey
 * @param string $attributes
 * @return string
 */
function _qbxml_array_to_xml(&$array, $parentkey = NULL, $attributes = '') {
  $output = '';
  $raw = '';
  if (isset($array['@attributes'])) {
    $attributes = _qbxml_gen_attributes($array['@attributes']);
  }
  if (isset($array['@raw'])) {
    $raw = $array['@raw'];
  }
  $prefix = $parentkey ? '<' . $parentkey . ($attributes ? $attributes : '') . '>' : '';
  $postfix = $parentkey ? '</' . $parentkey . '>' : '';
  if (is_scalar($array)) {
    if ($array) {
      $output .= $prefix . $array . $postfix;
    }
  }
  else {
    $buildup = '';
    if ($array) {
      foreach ($array as $key => $value) {
        if (!($key[0] == '@')) { // ignore any keys starting with '@' they are metadata
          if (is_integer($key)) {
            if ($res = _qbxml_array_to_xml($value)) {
              $output .= $prefix . $res . $postfix;
            }
          }
          else {
            if ($res = _qbxml_array_to_xml($value, $key)) {
              $buildup .= $res;
            }
          }
        }
      }
    } // will produce empty container if array is null
    if ($buildup || $raw) {
      $output .= $prefix . $buildup . $raw . $postfix;
    }
  }
  return $output;
}

/*
 * generate arbitrarily deep nested array element
 */
function qbxml_set_deep_array_element(&$ret, array &$keys, $value) {
  $key = array_shift($keys);
  if (!count($keys)) {
    $ret[$key] = $value;
    return;
  }
  if (!isset($ret[$key])) {
    $ret[$key] = array();
  }
  qbxml_set_deep_array_element($ret[$key], $keys, $value);
}

/*
 * Create an XML request by theming the variables using the base and opcode
 * Output is stashed in @raw qbxml formatted string embedded in a qbxml renderable
 * array (this is different from a Drupal render array)
 */
function qbxml_form_generate_qbxml(&$variables, $base, $opcode) {
  $vars = array(
    'qbxml_base' => $base,
    'qbxml_opcode' => $opcode,
    'input' => $variables
  );
  $ret = array('@raw' => theme('qbxml', $vars));
  if (stristr($ret['@raw'], 'MaxReturned')) {
    $ret['@attributes'] = array('iterator' => 'Start');
  }
  return $ret;
}

/*
 * get @request metadata array from form
 * form keys with names beginning with QBXML_FORM_REQUEST_PREFIX will get turned into
 *   request metadata array according to name
 * all form keys will be searched for anything named with maxreturned and if they have a value then
 *   the request will get an iterator="Start" attribute
 */
function qbxml_form_generate_request_metadata(&$variables) {
  $requestinfo = array();
  // generate callback information from form
  foreach (preg_grep('/^' . QBXML_FORM_REQUEST_PREFIX . '/', array_keys($variables)) as $callbackinfo) {
    $info = explode('_', substr($callbackinfo, strlen(QBXML_FORM_REQUEST_PREFIX)));
    qbxml_set_deep_array_element($requestinfo, $info, $variables[$callbackinfo]);
  }
  return $requestinfo;
}

/*
 * Generate QB XML request from form
 * Returns a renderable QBXMLMsgsRq array
 */
function qbxml_form_generate_request(&$variables, $base, $opcode) {
  $requestcmd = $base . $opcode . 'Rq';
  $ret = array(
           $requestcmd => array(
             '@request' => qbxml_form_generate_request_metadata($variables),
             '@key' => $requestcmd,
             ),
         );
  $ret[$requestcmd] = array_merge($ret[$requestcmd], qbxml_form_generate_qbxml($variables, $base, $opcode));
  return $ret;
}

/*
 * Generate QBXMLMsgsRq from set of requests
 */
function qbxml_generate_qbxmlmsgsrq(array &$requests, $attributes = array('onError' => 'continueOnError')) {
  return array_merge( array( '@attributes' => $attributes,
                             '@key' => 'QBXMLMsgsRq' ), $requests );
}

/*
 * Implement the action to take a QBXMLMsgsRq, and put them into the QBXML send Q
 * attach callback information.
 */
function qbxml_action_add_xml_array_to_out_queue($bookid, $qbxmlmsgsrq) {
  $groupID = 0;
  foreach ($qbxmlmsgsrq as $requestkey => &$request) {
    if ( $requestkey[0] != '@' ) {
      // put into database
      $actualrequest = &$request;
      $actualkey = $requestkey;
      if( is_int($requestkey) ) { // array of possibly same tags
        foreach( $request as $key => &$req ) {
          $actualkey = $key;
          $actualrequest = &$req;
        }
      }
      $actualrequest['@request']['groupID'] = $groupID;
      if( !isset($actualrequest['@request']['callback']) ) {
        $actualrequest['@request']['callback'] = array(
          'importer' => QBXML_DEFAULT_IMPORTER,
          'feedsprefix' => QBXML_FEEDS_PREFIX,
          'importtermmapper' => 'bc_importtermmapper'
        );
      }
      $actualrequest['@request']['parent'] = array(
          'key' => $qbxmlmsgsrq['@key'],
          'attributes' => isset($qbxmlmsgsrq['@attributes']) ? $qbxmlmsgsrq['@attributes'] : array(),
        );
      $actualrequest['@request']['key'] = $actualkey;
      
      $requestID = _qbxml_request_stash($bookid, $actualrequest['@request']['groupID'], array('request' => &$actualrequest));
      $actualrequest['@attributes']['requestID'] = $requestID;
      if (!$groupID) {
        $groupID = $requestID;
      }
    }
  }
  $qbxmlmsgsrq = array('QBXMLMsgsRq' => $qbxmlmsgsrq);
  $xmlstr = _qbxml_array_to_xml($qbxmlmsgsrq, 'QBXML');
  file_unmanaged_save_data($xmlstr, _qbxml_filename($bookid, $groupID, 'q'), FILE_EXISTS_REPLACE);
}

/*
 * Convert a camelcase term into an array
 */
function qbxml_camelterm_to_array( $camelterm ) {
  $camelarray = array();
  $ret = preg_match_all( '/[A-Z][a-z]+/', $camelterm, $camelarray ); 
  return( $ret == FALSE ? array() : $camelarray[0] );
}