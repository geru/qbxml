<?php
// $Id$

/**
 * @file
 * Install, update and uninstall functions for the qbxml_q module
 *
 * Download the schema module to auto-generate a schema array for a table:
 * http://drupal.org/project/schema.
 *
 * In this file, we're adding hook_install(), hook_uninstall() and hook_schema(). Notice
 * the variable_del()'s in hook_uninstall.
 */
require_once 'qbxml_q.inc';


/**
 * Implements hook_install().
 */
function qbxml_q_install()
{
  variable_set( QBXML_Q_FURI, 'private://qbxml_q' );
  
  // module_invoke_all( QBXML_HOOK_IN, NULL );       // announce presence of hook to system
  $queue = DrupalQueue::get(QBXML_Q_OUT, TRUE);
  $queue->createQueue();
  $queue = DrupalQueue::get(QBXML_Q_IN, TRUE);
  $queue->createQueue();
}


/**
 * Implements hook_uninstall().
 */
function qbxml_q_uninstall()
{ // Not sure whether to clear out the queues or not. There could be important stuff unprocessed in them
  // todo: qbxml_q database gets deleted. also remove QBXML_FURI directory if empty
  foreach( array( QBXML_Q_IN, QBXML_Q_OUT ) as $QID ) {}
  { $queue = DrupalQueue::get($QID, TRUE);
    if ($queue->numberOfItems() == 0) {
      $queue->deleteQueue();
    }
    else {
      drupal_set_message( t('ERROR: qbxml_q uninstall: ' . $QID . ' not empty') );
    }
  }
  // drupal_rmdir( qbxml_q_get_furi() );
  variable_del( QBXML_Q_FURI );
}


/**
 * Implements hook_schema().
 */
function qbxml_q_schema() {
  $schema['qbxml_q'] = array(
    'description' => 'qbxml_q database of incoming and outgoing queries and responses',
    'fields' => array(
      'requestID' => array(
        'description' => 'unique request ID for each outgoing and incoming message set',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'description' => 'The Unix timestamp when this request was created.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'callback' => array(
        'description' => 'json encoded callback information',
        'type' => 'varchar',
        'length' => '4096',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('requestID'),
  );
  return( $schema );
}